{
  "language": "Solidity",
  "sources": {
    "contracts/TransportWithAttestationWithouOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAttestationService {\n    function attest(address user, string calldata data) external;\n    function getAttestations(address user) external view returns (string[] memory);\n}\n\ncontract TransportWithAttestationWithoutOracle {\n    IAttestationService public attestationService;\n\n    struct Request {\n        address requester;\n        address serviceProvider;\n        uint paymentAmount;\n        bool completed;\n    }\n\n    mapping(uint => Request) public requests;\n    uint public requestCount;\n\n    mapping(address => uint) public ratings;\n    mapping(address => uint) public ratingCounts;\n\n    event RequestCreated(uint requestId, address requester, uint paymentAmount);\n    event RequestCompleted(uint requestId, uint rating);\n\n    constructor(address _attestationService) {\n        attestationService = IAttestationService(_attestationService);\n    }\n\n    modifier onlyRequester(uint requestId) {\n        require(requests[requestId].requester == msg.sender, \"Caller is not the requester\");\n        _;\n    }\n\n    modifier onlyServiceProvider(uint requestId) {\n        require(requests[requestId].serviceProvider == msg.sender, \"Caller is not the service provider\");\n        _;\n    }\n\n    /**\n     * @dev Function to create a new request.\n     * @param serviceProvider The address of the service provider.\n     * @param paymentAmount The amount to be paid for the service.\n     */\n    function createRequest(address serviceProvider, uint paymentAmount) public {\n        requestCount++;\n        requests[requestCount] = Request({\n            requester: msg.sender,\n            serviceProvider: serviceProvider,\n            paymentAmount: paymentAmount,\n            completed: false\n        });\n        emit RequestCreated(requestCount, msg.sender, paymentAmount);\n    }\n\n    /**\n     * @dev Function for the service provider to complete a request.\n     * @param requestId The ID of the request to be completed.\n     * @param rating The rating given to the service provider.\n     */\n    function completeRequest(uint requestId, uint rating) public onlyServiceProvider(requestId) {\n        Request storage request = requests[requestId];\n        require(!request.completed, \"Request is already completed\");\n        request.completed = true;\n        ratings[request.serviceProvider] += rating;\n        ratingCounts[request.serviceProvider]++;\n        emit RequestCompleted(requestId, rating);\n        attestationService.attest(request.serviceProvider, \"Request completed with rating\");\n    }\n\n    /**\n     * @dev Function to get the average rating of a user.\n     * @param user The address of the user.\n     * @return The average rating of the user.\n     */\n    function getAverageRating(address user) public view returns (uint) {\n        if (ratingCounts[user] == 0) {\n            return 0;\n        }\n        return ratings[user] / ratingCounts[user];\n    }\n\n    /**\n     * @dev Function to get the details of a request.\n     * @param requestId The ID of the request.\n     * @return The details of the request.\n     */\n    function getRequest(uint requestId) public view returns (Request memory) {\n        return requests[requestId];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}