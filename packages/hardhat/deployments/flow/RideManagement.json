{
  "address": "0x70C90CadAa637c11f5aAeF6F413b0350e2f79Ffa",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "passenger",
          "type": "address"
        }
      ],
      "name": "RideBooked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "RideCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "RideCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RidePosted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "bookRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "cancelRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "completeRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "confirmRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRides",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum RideManagement.RideState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "passengers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSeats",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableSeats",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "destination",
              "type": "string"
            }
          ],
          "internalType": "struct RideManagement.Ride[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "getRide",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum RideManagement.RideState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "passengers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSeats",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableSeats",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "destination",
              "type": "string"
            }
          ],
          "internalType": "struct RideManagement.Ride",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSeats",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "destination",
          "type": "string"
        }
      ],
      "name": "postRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1831b7404e1112ce2538036105cc11f9b7aa139452444cb690106a51ed62ad5b",
  "receipt": {
    "to": null,
    "from": "0xf15eBd90B2E453cb96663d119380Cc9D03F04DdA",
    "contractAddress": "0x70C90CadAa637c11f5aAeF6F413b0350e2f79Ffa",
    "transactionIndex": 0,
    "gasUsed": "1044343",
    "logsBloom": "0x
    "blockHash": "0x6287a27d0042449acf1f5ff4451eb14cb0419147c519985f9a42819abbad988b",
    "transactionHash": "0x1831b7404e1112ce2538036105cc11f9b7aa139452444cb690106a51ed62ad5b",
    "logs": [],
    "blockNumber": 16138313,
    "cumulativeGasUsed": "1044343",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "34c2166407e6790bf73336363e5d30b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"passenger\",\"type\":\"address\"}],\"name\":\"RideBooked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"RideCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"RideCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RidePosted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"bookRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"cancelRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"completeRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"confirmRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRides\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum RideManagement.RideState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"passengers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSeats\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"}],\"internalType\":\"struct RideManagement.Ride[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"getRide\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum RideManagement.RideState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"passengers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSeats\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"}],\"internalType\":\"struct RideManagement.Ride\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSeats\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"}],\"name\":\"postRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract manages rides, including their states and details. It provides functionality for posting, booking, and completing rides.\",\"kind\":\"dev\",\"methods\":{\"bookRide(bytes32)\":{\"details\":\"Function for a passenger to book a ride. Changes state from Posted to Booked if no available seats remain.\"},\"cancelRide(bytes32)\":{\"details\":\"Function for the driver to cancel a ride. Can be called in Pending, Posted, or Booked states.\"},\"completeRide(bytes32)\":{\"details\":\"Function for the driver to mark a ride as completed. Changes state from Booked to Completed.\"},\"confirmRide(bytes32)\":{\"details\":\"Function for the driver to confirm a ride. Changes state from Pending to Posted.\"},\"postRide(uint256,uint256,string)\":{\"details\":\"Function to post a new ride. Sets the initial state to Pending.\"}},\"title\":\"RideManagement\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RideManagement.sol\":\"RideManagement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Profile {\\n\\n    struct Driver {\\n        bool isDriver;          \\n        uint256 rating;           // Driver rating(score) \\n        string carAssetUrl;     // Car image and description ie number of seats available, pointing towards storacha\\n        string infoAssetUrl;    // Driver image, name , age pointing towards storacha database\\n        uint256 counterCourse;\\n        string zkPassport; \\n    }\\n\\n    struct Passenger {\\n        bool isPassenger;          \\n        uint256 rating;           // Passenger rating(score) \\n        string infoAssetUrl;    // Passenger image, name , age pointing towards storacha database\\n        uint256 counterCourse;\\n        string zkPassport; \\n    }\\n\\n    event DriverAdded(address indexed account);\\n    event DriverRemoved(address indexed account);\\n    event PassengerAdded(address indexed account); \\n    event PassengerRemoved(address indexed account);\\n\\n    mapping(address => Driver) private drivers;\\n    mapping(address => Passenger) private passengers;\\n\\n    // Define modifiers that checks to see if msg.sender has the appropriate role\\n    modifier onlyDriver() {\\n        require(isDriver(msg.sender), \\\"Sender isn't a driver\\\");\\n        _;\\n    }\\n\\n    modifier onlyPassenger() {\\n        require(isPassenger(msg.sender), \\\"Sender isn't a passenger\\\");\\n        _;\\n    }\\n\\n    function addDriver(uint256 _initialRating, string memory _carAssetUrl, string memory _profileAssetUrl) \\n        public \\n    {\\n        require(!isDriver(msg.sender), \\\"Sender is already a driver\\\");\\n        Driver memory driverDetails;\\n        driverDetails.isDriver = true;\\n        driverDetails.counterCourse = 0; \\n        driverDetails.rating = _initialRating;\\n        driverDetails.carAssetUrl = _carAssetUrl;\\n        driverDetails.infoAssetUrl = _profileAssetUrl;\\n        drivers[msg.sender] = driverDetails;\\n        emit DriverAdded(msg.sender);\\n    }\\n\\n    function addPassenger(uint256 _initialRating, string memory _profileAssetUrl) \\n        public \\n    {\\n        require(!isPassenger(msg.sender), \\\"Sender is already a passenger\\\");\\n        Passenger memory passengerDetail;\\n        passengerDetail.isPassenger = true;\\n        passengerDetail.counterCourse = 0; \\n        passengerDetail.rating = _initialRating;\\n        passengerDetail.infoAssetUrl = _profileAssetUrl;\\n        passengers[msg.sender] = passengerDetail;\\n        emit PassengerAdded(msg.sender);\\n    }\\n\\n    function removePassenger() \\n        public\\n        onlyPassenger\\n    {\\n        delete passengers[msg.sender];\\n        emit PassengerRemoved(msg.sender);\\n    }\\n\\n    function removeDriver() \\n        public\\n        onlyDriver\\n    {\\n        delete drivers[msg.sender];\\n        emit DriverRemoved(msg.sender);\\n    }\\n\\n    function updateRate(uint256 _newRate, address _account, bool _isDriver) \\n        public \\n    {\\n        if (_isDriver) {\\n            require(isPassenger(msg.sender), \\\"Sender isn't a passenger\\\");\\n            Driver memory driverDetails = drivers[_account];\\n            driverDetails.rating = _newRate;\\n            drivers[_account] = driverDetails; \\n        } else {\\n            require(isDriver(msg.sender), \\\"Sender isn't a driver\\\");\\n            Passenger memory passengerDetails = passengers[_account];\\n            passengerDetails.rating = _newRate;\\n            passengers[_account] = passengerDetails; \\n        }\\n    }\\n\\n    function isDriver(address account) public view returns (bool) {\\n        return drivers[account].isDriver;\\n    }\\n\\n    function isPassenger(address account) public view returns (bool) {\\n        return passengers[account].isPassenger;\\n    }\\n\\n    function getDriver(address account) public view returns (Driver memory) {\\n        return drivers[account];\\n    }\\n\\n    function getPassenger(address account) public view returns (Passenger memory) {\\n        return passengers[account];\\n    }\\n\\n    function getDriverRate(address account) public view returns (uint256) {\\n        return drivers[account].rating;\\n    }\\n\\n    function getPassengerRate(address account) public view returns (uint256) {\\n        return passengers[account].rating;\\n    }\\n\\n    function getDriverCounter(address account) public view returns (uint256) {\\n        return drivers[account].counterCourse;\\n    }\\n\\n    function getPassengerCounter(address account) public view returns (uint256) {\\n        return passengers[account].counterCourse;\\n    }\\n}\",\"keccak256\":\"0x0b682f8c3b8008e10387c1fc8d3d82a892e562e5b78074703bc9ace163a38684\",\"license\":\"MIT\"},\"contracts/RideManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Profile.sol\\\";\\n\\n/**\\n * @title RideManagement\\n * @dev This contract manages rides, including their states and details. It provides functionality for posting, booking, and completing rides.\\n */\\ncontract RideManagement {\\n    Ride[] private _rides;\\n    mapping(bytes32 => uint256) private _rideIndexMap;\\n    uint256 private _rideCount = 0;\\n\\n    /**\\n     * @dev Enum representing the various states a ride can be in.\\n     */\\n    enum RideState {\\n        Pending,      // Ride has been posted but not yet confirmed by the driver\\n        Posted,       // Ride has been confirmed by the driver and is available for booking\\n        Booked,       // Ride has been booked by a passenger\\n        InProgress,   // Ride is currently in progress\\n        Completed,    // Ride has been completed\\n        Canceled,     // Ride has been canceled\\n        Failed        // Ride has failed or been interrupted\\n    }\\n\\n    /**\\n     * @dev Struct representing a ride.\\n     */\\n    struct Ride {\\n        bytes32 id;\\n        RideState state;\\n        address owner;\\n        address[] passengers;\\n        uint256 price;\\n        uint256 timestamp;\\n        uint256 totalSeats;\\n        uint256 availableSeats;\\n        string destination;\\n    }\\n\\n    event RidePosted(bytes32 indexed rideId, address indexed owner);\\n    event RideBooked(bytes32 indexed rideId, address indexed passenger);\\n    event RideCompleted(bytes32 indexed rideId);\\n    event RideCanceled(bytes32 indexed rideId);\\n\\n    modifier onlyOwner(bytes32 rideId) {\\n        require(_rides[_rideIndexMap[rideId]].owner == msg.sender, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Function to post a new ride. Sets the initial state to Pending.\\n     */\\n    function postRide(uint256 price, uint256 totalSeats, string memory destination) public {\\n        bytes32 rideId = keccak256(abi.encodePacked(msg.sender, block.timestamp, _rideCount));\\n        Ride memory newRide = Ride({\\n            id: rideId,\\n            state: RideState.Pending,  // Set initial state to Pending\\n            owner: msg.sender,\\n            passengers: new address[](0),\\n            price: price,\\n            timestamp: block.timestamp,\\n            totalSeats: totalSeats,\\n            availableSeats: totalSeats,\\n            destination: destination\\n        });\\n        _rides.push(newRide);\\n        _rideIndexMap[rideId] = _rideCount;\\n        _rideCount++;\\n        emit RidePosted(rideId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Function for the driver to confirm a ride. Changes state from Pending to Posted.\\n     */\\n    function confirmRide(bytes32 rideId) public onlyOwner(rideId) {\\n        Ride storage ride = _rides[_rideIndexMap[rideId]];\\n        require(ride.state == RideState.Pending, \\\"Ride is not in pending state\\\");\\n        ride.state = RideState.Posted;\\n        emit RidePosted(ride.id, ride.owner);\\n    }\\n\\n    /**\\n     * @dev Function for a passenger to book a ride. Changes state from Posted to Booked if no available seats remain.\\n     */\\n    function bookRide(bytes32 rideId) public {\\n        Ride storage ride = _rides[_rideIndexMap[rideId]];\\n        require(ride.state == RideState.Posted, \\\"Ride is not available for booking\\\");\\n        require(ride.availableSeats > 0, \\\"No available seats\\\");\\n        ride.passengers.push(msg.sender);\\n        ride.availableSeats--;\\n        if (ride.availableSeats == 0) {\\n            ride.state = RideState.Booked;\\n        }\\n        emit RideBooked(rideId, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Function for the driver to mark a ride as completed. Changes state from Booked to Completed.\\n     */\\n    function completeRide(bytes32 rideId) public onlyOwner(rideId) {\\n        Ride storage ride = _rides[_rideIndexMap[rideId]];\\n        require(ride.state == RideState.Booked, \\\"Ride is not booked\\\");\\n        ride.state = RideState.Completed;\\n        emit RideCompleted(rideId);\\n    }\\n\\n    /**\\n     * @dev Function for the driver to cancel a ride. Can be called in Pending, Posted, or Booked states.\\n     */\\n    function cancelRide(bytes32 rideId) public onlyOwner(rideId) {\\n        Ride storage ride = _rides[_rideIndexMap[rideId]];\\n        require(ride.state == RideState.Pending || ride.state == RideState.Posted || ride.state == RideState.Booked, \\\"Ride cannot be canceled\\\");\\n        ride.state = RideState.Canceled;\\n        emit RideCanceled(rideId);\\n    }\\n\\n    function getRide(bytes32 rideId) public view returns (Ride memory) {\\n        return _rides[_rideIndexMap[rideId]];\\n    }\\n\\n    function getAllRides() public view returns (Ride[] memory) {\\n        return _rides;\\n    }\\n}\",\"keccak256\":\"0xccdb27db185c290b03221736f73a2b117f5ccef69a4e4cc0cc35129e87c4ce27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060025534801561001557600080fd5b506111e4806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a1371cc01161005b578063a1371cc0146100d5578063a55642c4146100e8578063b684f7bc146100fb578063b821f4461461010e57600080fd5b80636fad71701461008257806376e543bc146100ab578063787660c3146100c0575b600080fd5b610095610090366004610d06565b610121565b6040516100a29190610e7c565b60405180910390f35b6100be6100b9366004610d06565b61032d565b005b6100c8610485565b6040516100a29190610e96565b6100be6100e3366004610d06565b610658565b6100be6100f6366004610d06565b61078c565b6100be610109366004610d06565b610902565b6100be61011c366004610f0e565b610a83565b61017a60408051610120810190915260008082526020820190815260200160006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000828152600160205260408120548154811061019957610199610fd2565b906000526020600020906008020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff1660068111156101e1576101e1610d1f565b60068111156101f2576101f2610d1f565b8152600182015461010090046001600160a01b0316602080830191909152600283018054604080518285028101850182528281529401939283018282801561026357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610245575b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546102a490610fe8565b80601f01602080910402602001604051908101604052809291908181526020018280546102d090610fe8565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b5050505050815250509050919050565b6000818152600160205260408120548154839233929091811061035257610352610fd2565b600091825260209091206008909102016001015461010090046001600160a01b03161461039a5760405162461bcd60e51b815260040161039190611022565b60405180910390fd5b600082815260016020526040812054815482919081106103bc576103bc610fd2565b6000918252602082206008909102019150600182015460ff1660068111156103e6576103e6610d1f565b146104335760405162461bcd60e51b815260206004820152601c60248201527f52696465206973206e6f7420696e2070656e64696e67207374617465000000006044820152606401610391565b6001818101805460ff19169091179081905581546040516101009092046001600160a01b0316917f247d42936ac24fb4d5819b549bfb28fb77e14df5876a19cd499c50b5269de00890600090a3505050565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561064f578382906000526020600020906008020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff1660068111156104fb576104fb610d1f565b600681111561050c5761050c610d1f565b8152600182015461010090046001600160a01b0316602080830191909152600283018054604080518285028101850182528281529401939283018282801561057d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161055f575b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546105be90610fe8565b80601f01602080910402602001604051908101604052809291908181526020018280546105ea90610fe8565b80156106375780601f1061060c57610100808354040283529160200191610637565b820191906000526020600020905b81548152906001019060200180831161061a57829003601f168201915b505050505081525050815260200190600101906104a9565b50505050905090565b6000818152600160205260408120548154839233929091811061067d5761067d610fd2565b600091825260209091206008909102016001015461010090046001600160a01b0316146106bc5760405162461bcd60e51b815260040161039190611022565b600082815260016020526040812054815482919081106106de576106de610fd2565b6000918252602090912060089091020190506002600182015460ff16600681111561070b5761070b610d1f565b1461074d5760405162461bcd60e51b8152602060048201526012602482015271149a5919481a5cc81b9bdd08189bdbdad95960721b6044820152606401610391565b60018101805460ff1916600417905560405183907fc70a082468a69b6d795c167caee29e8d008b1461539c0fafb117a9d8d1ba8d9790600090a2505050565b600081815260016020526040812054815482919081106107ae576107ae610fd2565b60009182526020909120600890910201905060018082015460ff1660068111156107da576107da610d1f565b146108315760405162461bcd60e51b815260206004820152602160248201527f52696465206973206e6f7420617661696c61626c6520666f7220626f6f6b696e6044820152606760f81b6064820152608401610391565b600081600601541161087a5760405162461bcd60e51b81526020600482015260126024820152714e6f20617661696c61626c6520736561747360701b6044820152606401610391565b6002810180546001810182556000918252602082200180546001600160a01b03191633179055600682018054916108b08361106f565b919050555080600601546000036108d15760018101805460ff191660021790555b604051339083907fe125dd664af84001b03624835acc7f486d9ab867f918f7ba6751cc0c5ddc472b90600090a35050565b6000818152600160205260408120548154839233929091811061092757610927610fd2565b600091825260209091206008909102016001015461010090046001600160a01b0316146109665760405162461bcd60e51b815260040161039190611022565b6000828152600160205260408120548154829190811061098857610988610fd2565b6000918252602082206008909102019150600182015460ff1660068111156109b2576109b2610d1f565b14806109d5575060018082015460ff1660068111156109d3576109d3610d1f565b145b806109f857506002600182015460ff1660068111156109f6576109f6610d1f565b145b610a445760405162461bcd60e51b815260206004820152601760248201527f526964652063616e6e6f742062652063616e63656c65640000000000000000006044820152606401610391565b60018101805460ff1916600517905560405183907fb10228717d68529db945de6fbc8d5ae6093d7aed82d5fde8801ab3c11666bbbe90600090a2505050565b6002546040516bffffffffffffffffffffffff193360601b166020820152426034820152605481019190915260009060740160408051808303601f190181528282528051602091820120610120840183528084526000828501819052338585015283518181529283019093529350909190606082019081526020808201889052426040830152606082018790526080820187905260a09091018590526000805460018181018355918052835160089091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638101918255928401517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56490930180549495508594919392909160ff191690836006811115610ba557610ba5610d1f565b021790555060408201516001820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560608201518051610bf2916002840191602090910190610c8c565b506080820151600382015560a0820151600482015560c0820151600582015560e082015160068201556101008201516007820190610c3090826110d5565b5050600280546000858152600160205260408120829055909250610c5383611195565b9091555050604051339083907f247d42936ac24fb4d5819b549bfb28fb77e14df5876a19cd499c50b5269de00890600090a35050505050565b828054828255906000526020600020908101928215610ce1579160200282015b82811115610ce157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610cac565b50610ced929150610cf1565b5090565b5b80821115610ced5760008155600101610cf2565b600060208284031215610d1857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60078110610d5357634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015610d905781516001600160a01b031687529582019590820190600101610d6b565b509495945050505050565b6000815180845260005b81811015610dc157602081850181015186830182015201610da5565b506000602082860101526020601f19601f83011685010191505092915050565b6000610120825184526020830151610dfc6020860182610d35565b506040830151610e1760408601826001600160a01b03169052565b506060830151816060860152610e2f82860182610d57565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015185830382870152610e728382610d9b565b9695505050505050565b602081526000610e8f6020830184610de1565b9392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610eeb57603f19888603018452610ed9858351610de1565b94509285019290850190600101610ebd565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610f2357600080fd5b8335925060208401359150604084013567ffffffffffffffff80821115610f4957600080fd5b818601915086601f830112610f5d57600080fd5b813581811115610f6f57610f6f610ef8565b604051601f8201601f19908116603f01168101908382118183101715610f9757610f97610ef8565b81604052828152896020848701011115610fb057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610ffc57607f821691505b60208210810361101c57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008161107e5761107e611059565b506000190190565b601f8211156110d057600081815260208120601f850160051c810160208610156110ad5750805b601f850160051c820191505b818110156110cc578281556001016110b9565b5050505b505050565b815167ffffffffffffffff8111156110ef576110ef610ef8565b611103816110fd8454610fe8565b84611086565b602080601f83116001811461113857600084156111205750858301515b600019600386901b1c1916600185901b1785556110cc565b600085815260208120601f198616915b8281101561116757888601518255948401946001909101908401611148565b50858210156111855787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600182016111a7576111a7611059565b506001019056fea2646970667358221220e3c417d72039ac4d6a8f5d813e0de224f57d64883c309dd4d1d6e91489c1f68f64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a1371cc01161005b578063a1371cc0146100d5578063a55642c4146100e8578063b684f7bc146100fb578063b821f4461461010e57600080fd5b80636fad71701461008257806376e543bc146100ab578063787660c3146100c0575b600080fd5b610095610090366004610d06565b610121565b6040516100a29190610e7c565b60405180910390f35b6100be6100b9366004610d06565b61032d565b005b6100c8610485565b6040516100a29190610e96565b6100be6100e3366004610d06565b610658565b6100be6100f6366004610d06565b61078c565b6100be610109366004610d06565b610902565b6100be61011c366004610f0e565b610a83565b61017a60408051610120810190915260008082526020820190815260200160006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000828152600160205260408120548154811061019957610199610fd2565b906000526020600020906008020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff1660068111156101e1576101e1610d1f565b60068111156101f2576101f2610d1f565b8152600182015461010090046001600160a01b0316602080830191909152600283018054604080518285028101850182528281529401939283018282801561026357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610245575b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546102a490610fe8565b80601f01602080910402602001604051908101604052809291908181526020018280546102d090610fe8565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b5050505050815250509050919050565b6000818152600160205260408120548154839233929091811061035257610352610fd2565b600091825260209091206008909102016001015461010090046001600160a01b03161461039a5760405162461bcd60e51b815260040161039190611022565b60405180910390fd5b600082815260016020526040812054815482919081106103bc576103bc610fd2565b6000918252602082206008909102019150600182015460ff1660068111156103e6576103e6610d1f565b146104335760405162461bcd60e51b815260206004820152601c60248201527f52696465206973206e6f7420696e2070656e64696e67207374617465000000006044820152606401610391565b6001818101805460ff19169091179081905581546040516101009092046001600160a01b0316917f247d42936ac24fb4d5819b549bfb28fb77e14df5876a19cd499c50b5269de00890600090a3505050565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561064f578382906000526020600020906008020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff1660068111156104fb576104fb610d1f565b600681111561050c5761050c610d1f565b8152600182015461010090046001600160a01b0316602080830191909152600283018054604080518285028101850182528281529401939283018282801561057d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161055f575b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546105be90610fe8565b80601f01602080910402602001604051908101604052809291908181526020018280546105ea90610fe8565b80156106375780601f1061060c57610100808354040283529160200191610637565b820191906000526020600020905b81548152906001019060200180831161061a57829003601f168201915b505050505081525050815260200190600101906104a9565b50505050905090565b6000818152600160205260408120548154839233929091811061067d5761067d610fd2565b600091825260209091206008909102016001015461010090046001600160a01b0316146106bc5760405162461bcd60e51b815260040161039190611022565b600082815260016020526040812054815482919081106106de576106de610fd2565b6000918252602090912060089091020190506002600182015460ff16600681111561070b5761070b610d1f565b1461074d5760405162461bcd60e51b8152602060048201526012602482015271149a5919481a5cc81b9bdd08189bdbdad95960721b6044820152606401610391565b60018101805460ff1916600417905560405183907fc70a082468a69b6d795c167caee29e8d008b1461539c0fafb117a9d8d1ba8d9790600090a2505050565b600081815260016020526040812054815482919081106107ae576107ae610fd2565b60009182526020909120600890910201905060018082015460ff1660068111156107da576107da610d1f565b146108315760405162461bcd60e51b815260206004820152602160248201527f52696465206973206e6f7420617661696c61626c6520666f7220626f6f6b696e6044820152606760f81b6064820152608401610391565b600081600601541161087a5760405162461bcd60e51b81526020600482015260126024820152714e6f20617661696c61626c6520736561747360701b6044820152606401610391565b6002810180546001810182556000918252602082200180546001600160a01b03191633179055600682018054916108b08361106f565b919050555080600601546000036108d15760018101805460ff191660021790555b604051339083907fe125dd664af84001b03624835acc7f486d9ab867f918f7ba6751cc0c5ddc472b90600090a35050565b6000818152600160205260408120548154839233929091811061092757610927610fd2565b600091825260209091206008909102016001015461010090046001600160a01b0316146109665760405162461bcd60e51b815260040161039190611022565b6000828152600160205260408120548154829190811061098857610988610fd2565b6000918252602082206008909102019150600182015460ff1660068111156109b2576109b2610d1f565b14806109d5575060018082015460ff1660068111156109d3576109d3610d1f565b145b806109f857506002600182015460ff1660068111156109f6576109f6610d1f565b145b610a445760405162461bcd60e51b815260206004820152601760248201527f526964652063616e6e6f742062652063616e63656c65640000000000000000006044820152606401610391565b60018101805460ff1916600517905560405183907fb10228717d68529db945de6fbc8d5ae6093d7aed82d5fde8801ab3c11666bbbe90600090a2505050565b6002546040516bffffffffffffffffffffffff193360601b166020820152426034820152605481019190915260009060740160408051808303601f190181528282528051602091820120610120840183528084526000828501819052338585015283518181529283019093529350909190606082019081526020808201889052426040830152606082018790526080820187905260a09091018590526000805460018181018355918052835160089091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638101918255928401517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56490930180549495508594919392909160ff191690836006811115610ba557610ba5610d1f565b021790555060408201516001820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560608201518051610bf2916002840191602090910190610c8c565b506080820151600382015560a0820151600482015560c0820151600582015560e082015160068201556101008201516007820190610c3090826110d5565b5050600280546000858152600160205260408120829055909250610c5383611195565b9091555050604051339083907f247d42936ac24fb4d5819b549bfb28fb77e14df5876a19cd499c50b5269de00890600090a35050505050565b828054828255906000526020600020908101928215610ce1579160200282015b82811115610ce157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610cac565b50610ced929150610cf1565b5090565b5b80821115610ced5760008155600101610cf2565b600060208284031215610d1857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60078110610d5357634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015610d905781516001600160a01b031687529582019590820190600101610d6b565b509495945050505050565b6000815180845260005b81811015610dc157602081850181015186830182015201610da5565b506000602082860101526020601f19601f83011685010191505092915050565b6000610120825184526020830151610dfc6020860182610d35565b506040830151610e1760408601826001600160a01b03169052565b506060830151816060860152610e2f82860182610d57565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015185830382870152610e728382610d9b565b9695505050505050565b602081526000610e8f6020830184610de1565b9392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610eeb57603f19888603018452610ed9858351610de1565b94509285019290850190600101610ebd565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610f2357600080fd5b8335925060208401359150604084013567ffffffffffffffff80821115610f4957600080fd5b818601915086601f830112610f5d57600080fd5b813581811115610f6f57610f6f610ef8565b604051601f8201601f19908116603f01168101908382118183101715610f9757610f97610ef8565b81604052828152896020848701011115610fb057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610ffc57607f821691505b60208210810361101c57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008161107e5761107e611059565b506000190190565b601f8211156110d057600081815260208120601f850160051c810160208610156110ad5750805b601f850160051c820191505b818110156110cc578281556001016110b9565b5050505b505050565b815167ffffffffffffffff8111156110ef576110ef610ef8565b611103816110fd8454610fe8565b84611086565b602080601f83116001811461113857600084156111205750858301515b600019600386901b1c1916600185901b1785556110cc565b600085815260208120601f198616915b8281101561116757888601518255948401946001909101908401611148565b50858210156111855787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600182016111a7576111a7611059565b506001019056fea2646970667358221220e3c417d72039ac4d6a8f5d813e0de224f57d64883c309dd4d1d6e91489c1f68f64736f6c63430008140033",
  "devdoc": {
    "details": "This contract manages rides, including their states and details. It provides functionality for posting, booking, and completing rides.",
    "kind": "dev",
    "methods": {
      "bookRide(bytes32)": {
        "details": "Function for a passenger to book a ride. Changes state from Posted to Booked if no available seats remain."
      },
      "cancelRide(bytes32)": {
        "details": "Function for the driver to cancel a ride. Can be called in Pending, Posted, or Booked states."
      },
      "completeRide(bytes32)": {
        "details": "Function for the driver to mark a ride as completed. Changes state from Booked to Completed."
      },
      "confirmRide(bytes32)": {
        "details": "Function for the driver to confirm a ride. Changes state from Pending to Posted."
      },
      "postRide(uint256,uint256,string)": {
        "details": "Function to post a new ride. Sets the initial state to Pending."
      }
    },
    "title": "RideManagement",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 412,
        "contract": "contracts/RideManagement.sol:RideManagement",
        "label": "_rides",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Ride)450_storage)dyn_storage"
      },
      {
        "astId": 416,
        "contract": "contracts/RideManagement.sol:RideManagement",
        "label": "_rideIndexMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 419,
        "contract": "contracts/RideManagement.sol:RideManagement",
        "label": "_rideCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Ride)450_storage)dyn_storage": {
        "base": "t_struct(Ride)450_storage",
        "encoding": "dynamic_array",
        "label": "struct RideManagement.Ride[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RideState)428": {
        "encoding": "inplace",
        "label": "enum RideManagement.RideState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Ride)450_storage": {
        "encoding": "inplace",
        "label": "struct RideManagement.Ride",
        "members": [
          {
            "astId": 431,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 434,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(RideState)428"
          },
          {
            "astId": 436,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "owner",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 439,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "passengers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 441,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 443,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 445,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "totalSeats",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 447,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "availableSeats",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 449,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "destination",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}