{
  "address": "0x1b78aA9A1a567Ef6d7B10Cb6a3F138547a577290",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "passenger",
          "type": "address"
        }
      ],
      "name": "RideBooked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "RideCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "RideCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RidePosted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "bookRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "cancelRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "completeRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRides",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum RideManagement.RideState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "passengers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSeats",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableSeats",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "destination",
              "type": "string"
            }
          ],
          "internalType": "struct RideManagement.Ride[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "rideId",
          "type": "bytes32"
        }
      ],
      "name": "getRide",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "enum RideManagement.RideState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "passengers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSeats",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableSeats",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "destination",
              "type": "string"
            }
          ],
          "internalType": "struct RideManagement.Ride",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSeats",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "destination",
          "type": "string"
        }
      ],
      "name": "postRide",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd14450b4bf3c0cb7ab3a882bb7b05fd9f16cbaa6151cae85399e5c171c457e4",
  "receipt": {
    "to": null,
    "from": "0xf15eBd90B2E453cb96663d119380Cc9D03F04DdA",
    "contractAddress": "0x1b78aA9A1a567Ef6d7B10Cb6a3F138547a577290",
    "transactionIndex": 0,
    "gasUsed": "959608",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x34fe0835e8862570365674370539d47113f9b4bf85ba62f36662133ad19d8b1e",
    "transactionHash": "0xfd14450b4bf3c0cb7ab3a882bb7b05fd9f16cbaa6151cae85399e5c171c457e4",
    "logs": [],
    "blockNumber": 7301438,
    "cumulativeGasUsed": "959608",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "60641c203150ae3a5bb89212474bd2e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"passenger\",\"type\":\"address\"}],\"name\":\"RideBooked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"RideCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"RideCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RidePosted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"bookRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"cancelRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"completeRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRides\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum RideManagement.RideState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"passengers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSeats\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"}],\"internalType\":\"struct RideManagement.Ride[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rideId\",\"type\":\"bytes32\"}],\"name\":\"getRide\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"enum RideManagement.RideState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"passengers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableSeats\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"}],\"internalType\":\"struct RideManagement.Ride\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSeats\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destination\",\"type\":\"string\"}],\"name\":\"postRide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract manages rides, including their states and details. It provides functionality for posting, booking, and completing rides.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"RideManagement\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RideManagement.sol\":\"RideManagement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Profile {\\n\\n    struct Driver {\\n        bool isDriver;          \\n        uint256 rate;           // Driver rate \\n        string carAssetUrl;     // Car image and description ie number of seats available, pointing towards storacha\\n        string infoAssetUrl;    // Driver image, name , age pointing towards storacha database\\n        uint256 counterCourse;\\n        string zkPassport; \\n    }\\n\\n    struct Passenger {\\n        bool isPassenger;          \\n        uint256 rate;           // Passenger rate \\n        string infoAssetUrl;    // Passenger image, name , age pointing towards storacha database\\n        uint256 counterCourse;\\n        string zkPassport; \\n    }\\n\\n    event DriverAdded(address indexed account);\\n    event DriverRemoved(address indexed account);\\n    event PassengerAdded(address indexed account); \\n    event PassengerRemoved(address indexed account);\\n\\n    mapping(address => Driver) private drivers;\\n    mapping(address => Passenger) private passengers;\\n\\n    // Define modifiers that checks to see if msg.sender has the appropriate role\\n    modifier onlyDriver() {\\n        require(isDriver(msg.sender), \\\"Sender isn't a driver\\\");\\n        _;\\n    }\\n\\n    modifier onlyPassenger() {\\n        require(isPassenger(msg.sender), \\\"Sender isn't a passenger\\\");\\n        _;\\n    }\\n\\n    function addDriver(uint256 _startingRate, string memory _carAssetUrl, string memory _profileAssetUrl) \\n        public \\n    {\\n        require(!isDriver(msg.sender), \\\"Sender is already a driver\\\");\\n        Driver memory driverDetails;\\n        driverDetails.isDriver = true;\\n        driverDetails.counterCourse = 0; \\n        driverDetails.rate = _startingRate;\\n        driverDetails.carAssetUrl = _carAssetUrl;\\n        driverDetails.infoAssetUrl = _profileAssetUrl;\\n        drivers[msg.sender] = driverDetails;\\n        emit DriverAdded(msg.sender);\\n    }\\n\\n    function addPassenger(uint256 _startingRate, string memory _profileAssetUrl) \\n        public \\n    {\\n        require(!isPassenger(msg.sender), \\\"Sender is already a passenger\\\");\\n        Passenger memory passengerDetail;\\n        passengerDetail.isPassenger = true;\\n        passengerDetail.counterCourse = 0; \\n        passengerDetail.rate = _startingRate;\\n        passengerDetail.infoAssetUrl = _profileAssetUrl;\\n        passengers[msg.sender] = passengerDetail;\\n        emit PassengerAdded(msg.sender);\\n    }\\n\\n    function removePassenger() \\n        public\\n        onlyPassenger\\n    {\\n        delete passengers[msg.sender];\\n        emit PassengerRemoved(msg.sender);\\n    }\\n\\n    function removeDriver() \\n        public\\n        onlyDriver\\n    {\\n        delete drivers[msg.sender];\\n        emit DriverRemoved(msg.sender);\\n    }\\n\\n    function updateRate(uint256 _newRate, address _account, bool _isDriver) \\n        public \\n    {\\n        if (_isDriver) {\\n            require(isPassenger(msg.sender), \\\"Sender isn't a passenger\\\");\\n            Driver memory driverDetails = drivers[_account];\\n            driverDetails.rate = _newRate;\\n            drivers[_account] = driverDetails; \\n        } else {\\n            require(isDriver(msg.sender), \\\"Sender isn't a driver\\\");\\n            Passenger memory passengerDetails = passengers[_account];\\n            passengerDetails.rate = _newRate;\\n            passengers[_account] = passengerDetails; \\n        }\\n    }\\n\\n    function isDriver(address account) public view returns (bool) {\\n        return drivers[account].isDriver;\\n    }\\n\\n    function isPassenger(address account) public view returns (bool) {\\n        return passengers[account].isPassenger;\\n    }\\n\\n    function getDriver(address account) public view returns (Driver memory) {\\n        return drivers[account];\\n    }\\n\\n    function getPassenger(address account) public view returns (Passenger memory) {\\n        return passengers[account];\\n    }\\n\\n    function getDriverRate(address account) public view returns (uint256) {\\n        return drivers[account].rate;\\n    }\\n\\n    function getPassengerRate(address account) public view returns (uint256) {\\n        return passengers[account].rate;\\n    }\\n\\n    function getDriverCounter(address account) public view returns (uint256) {\\n        return drivers[account].counterCourse;\\n    }\\n\\n    function getPassengerCounter(address account) public view returns (uint256) {\\n        return passengers[account].counterCourse;\\n    }\\n}\",\"keccak256\":\"0x76c5b6b6dbb3ce4041eeb647876e8be2436e841bade50ae2b7720e6068dbe421\",\"license\":\"MIT\"},\"contracts/RideManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Profile.sol\\\";\\n\\n/**\\n * @title RideManagement\\n * @dev This contract manages rides, including their states and details. It provides functionality for posting, booking, and completing rides.\\n */\\ncontract RideManagement {\\n    Ride[] private _rides;\\n    mapping(bytes32 => uint256) private _rideIndexMap;\\n    uint256 private _rideCount = 0;\\n\\n    enum RideState {\\n        Posted,\\n        Booked,\\n        Completed,\\n        Canceled\\n    }\\n\\n    struct Ride {\\n        bytes32 id;\\n        RideState state;\\n        address owner;\\n        address[] passengers;\\n        uint256 price;\\n        uint256 timestamp;\\n        uint256 totalSeats;\\n        uint256 availableSeats;\\n        string destination;\\n    }\\n\\n    event RidePosted(bytes32 indexed rideId, address indexed owner);\\n    event RideBooked(bytes32 indexed rideId, address indexed passenger);\\n    event RideCompleted(bytes32 indexed rideId);\\n    event RideCanceled(bytes32 indexed rideId);\\n\\n    modifier onlyOwner(bytes32 rideId) {\\n        require(_rides[_rideIndexMap[rideId]].owner == msg.sender, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function postRide(uint256 price, uint256 totalSeats, string memory destination) public {\\n        bytes32 rideId = keccak256(abi.encodePacked(msg.sender, block.timestamp, _rideCount));\\n        Ride memory newRide = Ride({\\n            id: rideId,\\n            state: RideState.Posted,\\n            owner: msg.sender,\\n            passengers: new address[](0),\\n            price: price,\\n            timestamp: block.timestamp,\\n            totalSeats: totalSeats,\\n            availableSeats: totalSeats,\\n            destination: destination\\n        });\\n        _rides.push(newRide);\\n        _rideIndexMap[rideId] = _rideCount;\\n        _rideCount++;\\n        emit RidePosted(rideId, msg.sender);\\n    }\\n\\n    function bookRide(bytes32 rideId) public {\\n        Ride storage ride = _rides[_rideIndexMap[rideId]];\\n        require(ride.state == RideState.Posted, \\\"Ride is not available for booking\\\");\\n        require(ride.availableSeats > 0, \\\"No available seats\\\");\\n        ride.passengers.push(msg.sender);\\n        ride.availableSeats--;\\n        if (ride.availableSeats == 0) {\\n            ride.state = RideState.Booked;\\n        }\\n        emit RideBooked(rideId, msg.sender);\\n    }\\n\\n    function completeRide(bytes32 rideId) public onlyOwner(rideId) {\\n        Ride storage ride = _rides[_rideIndexMap[rideId]];\\n        require(ride.state == RideState.Booked, \\\"Ride is not booked\\\");\\n        ride.state = RideState.Completed;\\n        emit RideCompleted(rideId);\\n    }\\n\\n    function cancelRide(bytes32 rideId) public onlyOwner(rideId) {\\n        Ride storage ride = _rides[_rideIndexMap[rideId]];\\n        require(ride.state == RideState.Posted || ride.state == RideState.Booked, \\\"Ride cannot be canceled\\\");\\n        ride.state = RideState.Canceled;\\n        emit RideCanceled(rideId);\\n    }\\n\\n    function getRide(bytes32 rideId) public view returns (Ride memory) {\\n        return _rides[_rideIndexMap[rideId]];\\n    }\\n\\n    function getAllRides() public view returns (Ride[] memory) {\\n        return _rides;\\n    }\\n}\",\"keccak256\":\"0xad330ee4cfb346f113ef2a7ab3459f65e89976916940bc2d14fe0217e3a68e7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060025534801561001557600080fd5b5061105b806100256000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636fad717014610067578063787660c314610090578063a1371cc0146100a5578063a55642c4146100ba578063b684f7bc146100cd578063b821f446146100e0575b600080fd5b61007a610075366004610bb4565b6100f3565b6040516100879190610d2a565b60405180910390f35b6100986102ff565b6040516100879190610d44565b6100b86100b3366004610bb4565b6104d2565b005b6100b86100c8366004610bb4565b610634565b6100b86100db366004610bb4565b6107a9565b6100b86100ee366004610dbc565b610931565b61014c60408051610120810190915260008082526020820190815260200160006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000828152600160205260408120548154811061016b5761016b610e80565b906000526020600020906008020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff1660038111156101b3576101b3610bcd565b60038111156101c4576101c4610bcd565b8152600182015461010090046001600160a01b0316602080830191909152600283018054604080518285028101850182528281529401939283018282801561023557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610217575b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461027690610e96565b80601f01602080910402602001604051908101604052809291908181526020018280546102a290610e96565b80156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b5050505050815250509050919050565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156104c9578382906000526020600020906008020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff16600381111561037557610375610bcd565b600381111561038657610386610bcd565b8152600182015461010090046001600160a01b031660208083019190915260028301805460408051828502810185018252828152940193928301828280156103f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103d9575b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461043890610e96565b80601f016020809104026020016040519081016040528092919081815260200182805461046490610e96565b80156104b15780601f10610486576101008083540402835291602001916104b1565b820191906000526020600020905b81548152906001019060200180831161049457829003601f168201915b50505050508152505081526020019060010190610323565b50505050905090565b600081815260016020526040812054815483923392909181106104f7576104f7610e80565b600091825260209091206008909102016001015461010090046001600160a01b0316146105655760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064015b60405180910390fd5b6000828152600160205260408120548154829190811061058757610587610e80565b60009182526020909120600890910201905060018082015460ff1660038111156105b3576105b3610bcd565b146105f55760405162461bcd60e51b8152602060048201526012602482015271149a5919481a5cc81b9bdd08189bdbdad95960721b604482015260640161055c565b60018101805460ff1916600217905560405183907fc70a082468a69b6d795c167caee29e8d008b1461539c0fafb117a9d8d1ba8d9790600090a2505050565b6000818152600160205260408120548154829190811061065657610656610e80565b6000918252602082206008909102019150600182015460ff16600381111561068057610680610bcd565b146106d75760405162461bcd60e51b815260206004820152602160248201527f52696465206973206e6f7420617661696c61626c6520666f7220626f6f6b696e6044820152606760f81b606482015260840161055c565b60008160060154116107205760405162461bcd60e51b81526020600482015260126024820152714e6f20617661696c61626c6520736561747360701b604482015260640161055c565b6002810180546001810182556000918252602082200180546001600160a01b031916331790556006820180549161075683610ee6565b91905055508060060154600003610778576001818101805460ff191690911790555b604051339083907fe125dd664af84001b03624835acc7f486d9ab867f918f7ba6751cc0c5ddc472b90600090a35050565b600081815260016020526040812054815483923392909181106107ce576107ce610e80565b600091825260209091206008909102016001015461010090046001600160a01b0316146108375760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b604482015260640161055c565b6000828152600160205260408120548154829190811061085957610859610e80565b6000918252602082206008909102019150600182015460ff16600381111561088357610883610bcd565b14806108a6575060018082015460ff1660038111156108a4576108a4610bcd565b145b6108f25760405162461bcd60e51b815260206004820152601760248201527f526964652063616e6e6f742062652063616e63656c6564000000000000000000604482015260640161055c565b60018101805460ff1916600317905560405183907fb10228717d68529db945de6fbc8d5ae6093d7aed82d5fde8801ab3c11666bbbe90600090a2505050565b6002546040516bffffffffffffffffffffffff193360601b166020820152426034820152605481019190915260009060740160408051808303601f190181528282528051602091820120610120840183528084526000828501819052338585015283518181529283019093529350909190606082019081526020808201889052426040830152606082018790526080820187905260a09091018590526000805460018181018355918052835160089091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638101918255928401517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56490930180549495508594919392909160ff191690836003811115610a5357610a53610bcd565b021790555060408201516001820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560608201518051610aa0916002840191602090910190610b3a565b506080820151600382015560a0820151600482015560c0820151600582015560e082015160068201556101008201516007820190610ade9082610f4c565b5050600280546000858152600160205260408120829055909250610b018361100c565b9091555050604051339083907f247d42936ac24fb4d5819b549bfb28fb77e14df5876a19cd499c50b5269de00890600090a35050505050565b828054828255906000526020600020908101928215610b8f579160200282015b82811115610b8f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610b5a565b50610b9b929150610b9f565b5090565b5b80821115610b9b5760008155600101610ba0565b600060208284031215610bc657600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60048110610c0157634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015610c3e5781516001600160a01b031687529582019590820190600101610c19565b509495945050505050565b6000815180845260005b81811015610c6f57602081850181015186830182015201610c53565b506000602082860101526020601f19601f83011685010191505092915050565b6000610120825184526020830151610caa6020860182610be3565b506040830151610cc560408601826001600160a01b03169052565b506060830151816060860152610cdd82860182610c05565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015185830382870152610d208382610c49565b9695505050505050565b602081526000610d3d6020830184610c8f565b9392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d9957603f19888603018452610d87858351610c8f565b94509285019290850190600101610d6b565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610dd157600080fd5b8335925060208401359150604084013567ffffffffffffffff80821115610df757600080fd5b818601915086601f830112610e0b57600080fd5b813581811115610e1d57610e1d610da6565b604051601f8201601f19908116603f01168101908382118183101715610e4557610e45610da6565b81604052828152896020848701011115610e5e57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610eaa57607f821691505b602082108103610eca57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081610ef557610ef5610ed0565b506000190190565b601f821115610f4757600081815260208120601f850160051c81016020861015610f245750805b601f850160051c820191505b81811015610f4357828155600101610f30565b5050505b505050565b815167ffffffffffffffff811115610f6657610f66610da6565b610f7a81610f748454610e96565b84610efd565b602080601f831160018114610faf5760008415610f975750858301515b600019600386901b1c1916600185901b178555610f43565b600085815260208120601f198616915b82811015610fde57888601518255948401946001909101908401610fbf565b5085821015610ffc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161101e5761101e610ed0565b506001019056fea26469706673582212207ef0f7af629e604dddf9a36d4f7fc54c95fdd10d9fba602678ebdd92d996409564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80636fad717014610067578063787660c314610090578063a1371cc0146100a5578063a55642c4146100ba578063b684f7bc146100cd578063b821f446146100e0575b600080fd5b61007a610075366004610bb4565b6100f3565b6040516100879190610d2a565b60405180910390f35b6100986102ff565b6040516100879190610d44565b6100b86100b3366004610bb4565b6104d2565b005b6100b86100c8366004610bb4565b610634565b6100b86100db366004610bb4565b6107a9565b6100b86100ee366004610dbc565b610931565b61014c60408051610120810190915260008082526020820190815260200160006001600160a01b031681526020016060815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000828152600160205260408120548154811061016b5761016b610e80565b906000526020600020906008020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff1660038111156101b3576101b3610bcd565b60038111156101c4576101c4610bcd565b8152600182015461010090046001600160a01b0316602080830191909152600283018054604080518285028101850182528281529401939283018282801561023557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610217575b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461027690610e96565b80601f01602080910402602001604051908101604052809291908181526020018280546102a290610e96565b80156102ef5780601f106102c4576101008083540402835291602001916102ef565b820191906000526020600020905b8154815290600101906020018083116102d257829003601f168201915b5050505050815250509050919050565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156104c9578382906000526020600020906008020160405180610120016040529081600082015481526020016001820160009054906101000a900460ff16600381111561037557610375610bcd565b600381111561038657610386610bcd565b8152600182015461010090046001600160a01b031660208083019190915260028301805460408051828502810185018252828152940193928301828280156103f757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103d9575b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201805461043890610e96565b80601f016020809104026020016040519081016040528092919081815260200182805461046490610e96565b80156104b15780601f10610486576101008083540402835291602001916104b1565b820191906000526020600020905b81548152906001019060200180831161049457829003601f168201915b50505050508152505081526020019060010190610323565b50505050905090565b600081815260016020526040812054815483923392909181106104f7576104f7610e80565b600091825260209091206008909102016001015461010090046001600160a01b0316146105655760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b60448201526064015b60405180910390fd5b6000828152600160205260408120548154829190811061058757610587610e80565b60009182526020909120600890910201905060018082015460ff1660038111156105b3576105b3610bcd565b146105f55760405162461bcd60e51b8152602060048201526012602482015271149a5919481a5cc81b9bdd08189bdbdad95960721b604482015260640161055c565b60018101805460ff1916600217905560405183907fc70a082468a69b6d795c167caee29e8d008b1461539c0fafb117a9d8d1ba8d9790600090a2505050565b6000818152600160205260408120548154829190811061065657610656610e80565b6000918252602082206008909102019150600182015460ff16600381111561068057610680610bcd565b146106d75760405162461bcd60e51b815260206004820152602160248201527f52696465206973206e6f7420617661696c61626c6520666f7220626f6f6b696e6044820152606760f81b606482015260840161055c565b60008160060154116107205760405162461bcd60e51b81526020600482015260126024820152714e6f20617661696c61626c6520736561747360701b604482015260640161055c565b6002810180546001810182556000918252602082200180546001600160a01b031916331790556006820180549161075683610ee6565b91905055508060060154600003610778576001818101805460ff191690911790555b604051339083907fe125dd664af84001b03624835acc7f486d9ab867f918f7ba6751cc0c5ddc472b90600090a35050565b600081815260016020526040812054815483923392909181106107ce576107ce610e80565b600091825260209091206008909102016001015461010090046001600160a01b0316146108375760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b604482015260640161055c565b6000828152600160205260408120548154829190811061085957610859610e80565b6000918252602082206008909102019150600182015460ff16600381111561088357610883610bcd565b14806108a6575060018082015460ff1660038111156108a4576108a4610bcd565b145b6108f25760405162461bcd60e51b815260206004820152601760248201527f526964652063616e6e6f742062652063616e63656c6564000000000000000000604482015260640161055c565b60018101805460ff1916600317905560405183907fb10228717d68529db945de6fbc8d5ae6093d7aed82d5fde8801ab3c11666bbbe90600090a2505050565b6002546040516bffffffffffffffffffffffff193360601b166020820152426034820152605481019190915260009060740160408051808303601f190181528282528051602091820120610120840183528084526000828501819052338585015283518181529283019093529350909190606082019081526020808201889052426040830152606082018790526080820187905260a09091018590526000805460018181018355918052835160089091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638101918255928401517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56490930180549495508594919392909160ff191690836003811115610a5357610a53610bcd565b021790555060408201516001820180546001600160a01b0390921661010002610100600160a81b031990921691909117905560608201518051610aa0916002840191602090910190610b3a565b506080820151600382015560a0820151600482015560c0820151600582015560e082015160068201556101008201516007820190610ade9082610f4c565b5050600280546000858152600160205260408120829055909250610b018361100c565b9091555050604051339083907f247d42936ac24fb4d5819b549bfb28fb77e14df5876a19cd499c50b5269de00890600090a35050505050565b828054828255906000526020600020908101928215610b8f579160200282015b82811115610b8f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610b5a565b50610b9b929150610b9f565b5090565b5b80821115610b9b5760008155600101610ba0565b600060208284031215610bc657600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60048110610c0157634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015610c3e5781516001600160a01b031687529582019590820190600101610c19565b509495945050505050565b6000815180845260005b81811015610c6f57602081850181015186830182015201610c53565b506000602082860101526020601f19601f83011685010191505092915050565b6000610120825184526020830151610caa6020860182610be3565b506040830151610cc560408601826001600160a01b03169052565b506060830151816060860152610cdd82860182610c05565b9150506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015185830382870152610d208382610c49565b9695505050505050565b602081526000610d3d6020830184610c8f565b9392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d9957603f19888603018452610d87858351610c8f565b94509285019290850190600101610d6b565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610dd157600080fd5b8335925060208401359150604084013567ffffffffffffffff80821115610df757600080fd5b818601915086601f830112610e0b57600080fd5b813581811115610e1d57610e1d610da6565b604051601f8201601f19908116603f01168101908382118183101715610e4557610e45610da6565b81604052828152896020848701011115610e5e57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610eaa57607f821691505b602082108103610eca57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081610ef557610ef5610ed0565b506000190190565b601f821115610f4757600081815260208120601f850160051c81016020861015610f245750805b601f850160051c820191505b81811015610f4357828155600101610f30565b5050505b505050565b815167ffffffffffffffff811115610f6657610f66610da6565b610f7a81610f748454610e96565b84610efd565b602080601f831160018114610faf5760008415610f975750858301515b600019600386901b1c1916600185901b178555610f43565b600085815260208120601f198616915b82811015610fde57888601518255948401946001909101908401610fbf565b5085821015610ffc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161101e5761101e610ed0565b506001019056fea26469706673582212207ef0f7af629e604dddf9a36d4f7fc54c95fdd10d9fba602678ebdd92d996409564736f6c63430008140033",
  "devdoc": {
    "details": "This contract manages rides, including their states and details. It provides functionality for posting, booking, and completing rides.",
    "kind": "dev",
    "methods": {},
    "title": "RideManagement",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 412,
        "contract": "contracts/RideManagement.sol:RideManagement",
        "label": "_rides",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Ride)445_storage)dyn_storage"
      },
      {
        "astId": 416,
        "contract": "contracts/RideManagement.sol:RideManagement",
        "label": "_rideIndexMap",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 419,
        "contract": "contracts/RideManagement.sol:RideManagement",
        "label": "_rideCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Ride)445_storage)dyn_storage": {
        "base": "t_struct(Ride)445_storage",
        "encoding": "dynamic_array",
        "label": "struct RideManagement.Ride[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RideState)424": {
        "encoding": "inplace",
        "label": "enum RideManagement.RideState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Ride)445_storage": {
        "encoding": "inplace",
        "label": "struct RideManagement.Ride",
        "members": [
          {
            "astId": 426,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 429,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(RideState)424"
          },
          {
            "astId": 431,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "owner",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 434,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "passengers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 436,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 438,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 440,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "totalSeats",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 442,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "availableSeats",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 444,
            "contract": "contracts/RideManagement.sol:RideManagement",
            "label": "destination",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}