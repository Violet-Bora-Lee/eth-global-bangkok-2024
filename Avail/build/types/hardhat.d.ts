/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IUpgradeExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUpgradeExecutor__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MinHeapLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinHeapLib__factory>;
    getContractFactory(
      name: "AbsBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbsBridge__factory>;
    getContractFactory(
      name: "AbsInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbsInbox__factory>;
    getContractFactory(
      name: "AbsOutbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbsOutbox__factory>;
    getContractFactory(
      name: "Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: "ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Bridge__factory>;
    getContractFactory(
      name: "ERC20Inbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Inbox__factory>;
    getContractFactory(
      name: "ERC20Outbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Outbox__factory>;
    getContractFactory(
      name: "GasRefunder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasRefunder__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IDelayedMessageProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelayedMessageProvider__factory>;
    getContractFactory(
      name: "IERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Bridge__factory>;
    getContractFactory(
      name: "IERC20Inbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Inbox__factory>;
    getContractFactory(
      name: "IEthBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEthBridge__factory>;
    getContractFactory(
      name: "IInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInbox__factory>;
    getContractFactory(
      name: "IInboxBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInboxBase__factory>;
    getContractFactory(
      name: "Inbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Inbox__factory>;
    getContractFactory(
      name: "IOutbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOutbox__factory>;
    getContractFactory(
      name: "IOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnable__factory>;
    getContractFactory(
      name: "ISequencerInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISequencerInbox__factory>;
    getContractFactory(
      name: "Outbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Outbox__factory>;
    getContractFactory(
      name: "SequencerInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SequencerInbox__factory>;
    getContractFactory(
      name: "CacheManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CacheManager__factory>;
    getContractFactory(
      name: "ChallengeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChallengeManager__factory>;
    getContractFactory(
      name: "IChallengeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChallengeManager__factory>;
    getContractFactory(
      name: "IChallengeResultReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChallengeResultReceiver__factory>;
    getContractFactory(
      name: "AvailDABridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvailDABridge__factory>;
    getContractFactory(
      name: "IDABridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDABridge__factory>;
    getContractFactory(
      name: "AdminFallbackProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminFallbackProxy__factory>;
    getContractFactory(
      name: "DoubleLogicERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DoubleLogicERC1967Upgrade__factory>;
    getContractFactory(
      name: "DoubleLogicUUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DoubleLogicUUPSUpgradeable__factory>;
    getContractFactory(
      name: "IGasRefunder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGasRefunder__factory>;
    getContractFactory(
      name: "IReader4844",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReader4844__factory>;
    getContractFactory(
      name: "UUPSNotUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSNotUpgradeable__factory>;
    getContractFactory(
      name: "AvailDABridgeUnproxied",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvailDABridgeUnproxied__factory>;
    getContractFactory(
      name: "Benchmarks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Benchmarks__factory>;
    getContractFactory(
      name: "BridgeStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeStub__factory>;
    getContractFactory(
      name: "BridgeUnproxied",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeUnproxied__factory>;
    getContractFactory(
      name: "InboxStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InboxStub__factory>;
    getContractFactory(
      name: "MockResultReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockResultReceiver__factory>;
    getContractFactory(
      name: "MultiCallTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiCallTest__factory>;
    getContractFactory(
      name: "PendingBlkTimeAndNrAdvanceCheck",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PendingBlkTimeAndNrAdvanceCheck__factory>;
    getContractFactory(
      name: "ProgramTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProgramTest__factory>;
    getContractFactory(
      name: "ProxyAdminForBinding",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdminForBinding__factory>;
    getContractFactory(
      name: "SdkStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SdkStorage__factory>;
    getContractFactory(
      name: "SequencerInboxStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SequencerInboxStub__factory>;
    getContractFactory(
      name: "Simple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Simple__factory>;
    getContractFactory(
      name: "SimpleCacheManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleCacheManager__factory>;
    getContractFactory(
      name: "SimpleProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleProxy__factory>;
    getContractFactory(
      name: "SingleExecutionChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingleExecutionChallenge__factory>;
    getContractFactory(
      name: "TimedOutChallengeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimedOutChallengeManager__factory>;
    getContractFactory(
      name: "UpgradeExecutorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeExecutorMock__factory>;
    getContractFactory(
      name: "NodeInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NodeInterface__factory>;
    getContractFactory(
      name: "NodeInterfaceDebug",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NodeInterfaceDebug__factory>;
    getContractFactory(
      name: "HashProofHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HashProofHelper__factory>;
    getContractFactory(
      name: "IOneStepProofEntry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOneStepProofEntry__factory>;
    getContractFactory(
      name: "IOneStepProver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOneStepProver__factory>;
    getContractFactory(
      name: "OneStepProofEntry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneStepProofEntry__factory>;
    getContractFactory(
      name: "OneStepProver0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneStepProver0__factory>;
    getContractFactory(
      name: "OneStepProverHostIo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneStepProverHostIo__factory>;
    getContractFactory(
      name: "OneStepProverMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneStepProverMath__factory>;
    getContractFactory(
      name: "OneStepProverMemory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneStepProverMemory__factory>;
    getContractFactory(
      name: "ArbAddressTable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbAddressTable__factory>;
    getContractFactory(
      name: "ArbAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbAggregator__factory>;
    getContractFactory(
      name: "ArbDebug",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbDebug__factory>;
    getContractFactory(
      name: "ArbFunctionTable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbFunctionTable__factory>;
    getContractFactory(
      name: "ArbGasInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbGasInfo__factory>;
    getContractFactory(
      name: "ArbInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbInfo__factory>;
    getContractFactory(
      name: "ArbosActs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbosActs__factory>;
    getContractFactory(
      name: "ArbosTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbosTest__factory>;
    getContractFactory(
      name: "ArbOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbOwner__factory>;
    getContractFactory(
      name: "ArbOwnerPublic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbOwnerPublic__factory>;
    getContractFactory(
      name: "ArbRetryableTx",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbRetryableTx__factory>;
    getContractFactory(
      name: "ArbStatistics",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbStatistics__factory>;
    getContractFactory(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: "ArbWasm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbWasm__factory>;
    getContractFactory(
      name: "ArbWasmCache",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbWasmCache__factory>;
    getContractFactory(
      name: "AbsRollupEventInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbsRollupEventInbox__factory>;
    getContractFactory(
      name: "BridgeCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeCreator__factory>;
    getContractFactory(
      name: "DeployHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeployHelper__factory>;
    getContractFactory(
      name: "ERC20RollupEventInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20RollupEventInbox__factory>;
    getContractFactory(
      name: "FactoryDeployerHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryDeployerHelper__factory>;
    getContractFactory(
      name: "IDeployHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeployHelper__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Bridge__factory>;
    getContractFactory(
      name: "IInboxBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInboxBase__factory>;
    getContractFactory(
      name: "IRollupAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupAdmin__factory>;
    getContractFactory(
      name: "IRollupCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupCore__factory>;
    getContractFactory(
      name: "IRollupEventInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupEventInbox__factory>;
    getContractFactory(
      name: "IRollupUser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupUser__factory>;
    getContractFactory(
      name: "IRollupUserAbs",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupUserAbs__factory>;
    getContractFactory(
      name: "IRollupUserERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollupUserERC20__factory>;
    getContractFactory(
      name: "RollupAdminLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupAdminLogic__factory>;
    getContractFactory(
      name: "RollupCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupCore__factory>;
    getContractFactory(
      name: "RollupCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupCreator__factory>;
    getContractFactory(
      name: "RollupEventInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupEventInbox__factory>;
    getContractFactory(
      name: "RollupProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupProxy__factory>;
    getContractFactory(
      name: "AbsRollupUserLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbsRollupUserLogic__factory>;
    getContractFactory(
      name: "ERC20RollupUserLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20RollupUserLogic__factory>;
    getContractFactory(
      name: "RollupUserLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupUserLogic__factory>;
    getContractFactory(
      name: "ValidatorUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorUtils__factory>;
    getContractFactory(
      name: "ValidatorWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorWallet__factory>;
    getContractFactory(
      name: "ValidatorWalletCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidatorWalletCreator__factory>;
    getContractFactory(
      name: "BridgeTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeTester__factory>;
    getContractFactory(
      name: "CryptographyPrimitivesTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CryptographyPrimitivesTester__factory>;
    getContractFactory(
      name: "EthVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthVault__factory>;
    getContractFactory(
      name: "MessageTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageTester__factory>;
    getContractFactory(
      name: "OutboxWithoutOptTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OutboxWithoutOptTester__factory>;
    getContractFactory(
      name: "RollupMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupMock__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "ValueArrayTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValueArrayTester__factory>;

    getContractAt(
      name: "IUpgradeExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUpgradeExecutor>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MinHeapLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinHeapLib>;
    getContractAt(
      name: "AbsBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbsBridge>;
    getContractAt(
      name: "AbsInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbsInbox>;
    getContractAt(
      name: "AbsOutbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbsOutbox>;
    getContractAt(
      name: "Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: "ERC20Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Bridge>;
    getContractAt(
      name: "ERC20Inbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Inbox>;
    getContractAt(
      name: "ERC20Outbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Outbox>;
    getContractAt(
      name: "GasRefunder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasRefunder>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IDelayedMessageProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelayedMessageProvider>;
    getContractAt(
      name: "IERC20Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Bridge>;
    getContractAt(
      name: "IERC20Inbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Inbox>;
    getContractAt(
      name: "IEthBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEthBridge>;
    getContractAt(
      name: "IInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInbox>;
    getContractAt(
      name: "IInboxBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInboxBase>;
    getContractAt(
      name: "Inbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Inbox>;
    getContractAt(
      name: "IOutbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOutbox>;
    getContractAt(
      name: "IOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnable>;
    getContractAt(
      name: "ISequencerInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISequencerInbox>;
    getContractAt(
      name: "Outbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Outbox>;
    getContractAt(
      name: "SequencerInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SequencerInbox>;
    getContractAt(
      name: "CacheManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CacheManager>;
    getContractAt(
      name: "ChallengeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChallengeManager>;
    getContractAt(
      name: "IChallengeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChallengeManager>;
    getContractAt(
      name: "IChallengeResultReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChallengeResultReceiver>;
    getContractAt(
      name: "AvailDABridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvailDABridge>;
    getContractAt(
      name: "IDABridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDABridge>;
    getContractAt(
      name: "AdminFallbackProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminFallbackProxy>;
    getContractAt(
      name: "DoubleLogicERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DoubleLogicERC1967Upgrade>;
    getContractAt(
      name: "DoubleLogicUUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DoubleLogicUUPSUpgradeable>;
    getContractAt(
      name: "IGasRefunder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGasRefunder>;
    getContractAt(
      name: "IReader4844",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReader4844>;
    getContractAt(
      name: "UUPSNotUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSNotUpgradeable>;
    getContractAt(
      name: "AvailDABridgeUnproxied",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvailDABridgeUnproxied>;
    getContractAt(
      name: "Benchmarks",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Benchmarks>;
    getContractAt(
      name: "BridgeStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeStub>;
    getContractAt(
      name: "BridgeUnproxied",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeUnproxied>;
    getContractAt(
      name: "InboxStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InboxStub>;
    getContractAt(
      name: "MockResultReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockResultReceiver>;
    getContractAt(
      name: "MultiCallTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiCallTest>;
    getContractAt(
      name: "PendingBlkTimeAndNrAdvanceCheck",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PendingBlkTimeAndNrAdvanceCheck>;
    getContractAt(
      name: "ProgramTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProgramTest>;
    getContractAt(
      name: "ProxyAdminForBinding",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdminForBinding>;
    getContractAt(
      name: "SdkStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SdkStorage>;
    getContractAt(
      name: "SequencerInboxStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SequencerInboxStub>;
    getContractAt(
      name: "Simple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Simple>;
    getContractAt(
      name: "SimpleCacheManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleCacheManager>;
    getContractAt(
      name: "SimpleProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleProxy>;
    getContractAt(
      name: "SingleExecutionChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SingleExecutionChallenge>;
    getContractAt(
      name: "TimedOutChallengeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimedOutChallengeManager>;
    getContractAt(
      name: "UpgradeExecutorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeExecutorMock>;
    getContractAt(
      name: "NodeInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NodeInterface>;
    getContractAt(
      name: "NodeInterfaceDebug",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NodeInterfaceDebug>;
    getContractAt(
      name: "HashProofHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HashProofHelper>;
    getContractAt(
      name: "IOneStepProofEntry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOneStepProofEntry>;
    getContractAt(
      name: "IOneStepProver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOneStepProver>;
    getContractAt(
      name: "OneStepProofEntry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneStepProofEntry>;
    getContractAt(
      name: "OneStepProver0",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneStepProver0>;
    getContractAt(
      name: "OneStepProverHostIo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneStepProverHostIo>;
    getContractAt(
      name: "OneStepProverMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneStepProverMath>;
    getContractAt(
      name: "OneStepProverMemory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneStepProverMemory>;
    getContractAt(
      name: "ArbAddressTable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbAddressTable>;
    getContractAt(
      name: "ArbAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbAggregator>;
    getContractAt(
      name: "ArbDebug",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbDebug>;
    getContractAt(
      name: "ArbFunctionTable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbFunctionTable>;
    getContractAt(
      name: "ArbGasInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbGasInfo>;
    getContractAt(
      name: "ArbInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbInfo>;
    getContractAt(
      name: "ArbosActs",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbosActs>;
    getContractAt(
      name: "ArbosTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbosTest>;
    getContractAt(
      name: "ArbOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbOwner>;
    getContractAt(
      name: "ArbOwnerPublic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbOwnerPublic>;
    getContractAt(
      name: "ArbRetryableTx",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbRetryableTx>;
    getContractAt(
      name: "ArbStatistics",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbStatistics>;
    getContractAt(
      name: "ArbSys",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbSys>;
    getContractAt(
      name: "ArbWasm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbWasm>;
    getContractAt(
      name: "ArbWasmCache",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbWasmCache>;
    getContractAt(
      name: "AbsRollupEventInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbsRollupEventInbox>;
    getContractAt(
      name: "BridgeCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeCreator>;
    getContractAt(
      name: "DeployHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeployHelper>;
    getContractAt(
      name: "ERC20RollupEventInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20RollupEventInbox>;
    getContractAt(
      name: "FactoryDeployerHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryDeployerHelper>;
    getContractAt(
      name: "IDeployHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeployHelper>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Bridge>;
    getContractAt(
      name: "IInboxBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInboxBase>;
    getContractAt(
      name: "IRollupAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupAdmin>;
    getContractAt(
      name: "IRollupCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupCore>;
    getContractAt(
      name: "IRollupEventInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupEventInbox>;
    getContractAt(
      name: "IRollupUser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupUser>;
    getContractAt(
      name: "IRollupUserAbs",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupUserAbs>;
    getContractAt(
      name: "IRollupUserERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollupUserERC20>;
    getContractAt(
      name: "RollupAdminLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupAdminLogic>;
    getContractAt(
      name: "RollupCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupCore>;
    getContractAt(
      name: "RollupCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupCreator>;
    getContractAt(
      name: "RollupEventInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupEventInbox>;
    getContractAt(
      name: "RollupProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupProxy>;
    getContractAt(
      name: "AbsRollupUserLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbsRollupUserLogic>;
    getContractAt(
      name: "ERC20RollupUserLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20RollupUserLogic>;
    getContractAt(
      name: "RollupUserLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupUserLogic>;
    getContractAt(
      name: "ValidatorUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorUtils>;
    getContractAt(
      name: "ValidatorWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorWallet>;
    getContractAt(
      name: "ValidatorWalletCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidatorWalletCreator>;
    getContractAt(
      name: "BridgeTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeTester>;
    getContractAt(
      name: "CryptographyPrimitivesTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CryptographyPrimitivesTester>;
    getContractAt(
      name: "EthVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthVault>;
    getContractAt(
      name: "MessageTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageTester>;
    getContractAt(
      name: "OutboxWithoutOptTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OutboxWithoutOptTester>;
    getContractAt(
      name: "RollupMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupMock>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "ValueArrayTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValueArrayTester>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
