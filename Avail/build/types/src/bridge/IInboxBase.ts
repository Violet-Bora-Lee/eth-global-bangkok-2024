/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IInboxBaseInterface extends utils.Interface {
  functions: {
    "allowListEnabled()": FunctionFragment;
    "bridge()": FunctionFragment;
    "calculateRetryableSubmissionFee(uint256,uint256)": FunctionFragment;
    "getProxyAdmin()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isAllowed(address)": FunctionFragment;
    "maxDataSize()": FunctionFragment;
    "pause()": FunctionFragment;
    "sendContractTransaction(uint256,uint256,address,uint256,bytes)": FunctionFragment;
    "sendL2Message(bytes)": FunctionFragment;
    "sendL2MessageFromOrigin(bytes)": FunctionFragment;
    "sendUnsignedTransaction(uint256,uint256,uint256,address,uint256,bytes)": FunctionFragment;
    "sequencerInbox()": FunctionFragment;
    "setAllowList(address[],bool[])": FunctionFragment;
    "setAllowListEnabled(bool)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowListEnabled"
      | "bridge"
      | "calculateRetryableSubmissionFee"
      | "getProxyAdmin"
      | "initialize"
      | "isAllowed"
      | "maxDataSize"
      | "pause"
      | "sendContractTransaction"
      | "sendL2Message"
      | "sendL2MessageFromOrigin"
      | "sendUnsignedTransaction"
      | "sequencerInbox"
      | "setAllowList"
      | "setAllowListEnabled"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowListEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRetryableSubmissionFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDataSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendContractTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendL2Message",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendL2MessageFromOrigin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendUnsignedTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerInbox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowList",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allowListEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRetryableSubmissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDataSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendContractTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL2Message",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL2MessageFromOrigin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendUnsignedTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequencerInbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "InboxMessageDelivered(uint256,bytes)": EventFragment;
    "InboxMessageDeliveredFromOrigin(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InboxMessageDelivered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InboxMessageDeliveredFromOrigin"
  ): EventFragment;
}

export interface InboxMessageDeliveredEventObject {
  messageNum: BigNumber;
  data: string;
}
export type InboxMessageDeliveredEvent = TypedEvent<
  [BigNumber, string],
  InboxMessageDeliveredEventObject
>;

export type InboxMessageDeliveredEventFilter =
  TypedEventFilter<InboxMessageDeliveredEvent>;

export interface InboxMessageDeliveredFromOriginEventObject {
  messageNum: BigNumber;
}
export type InboxMessageDeliveredFromOriginEvent = TypedEvent<
  [BigNumber],
  InboxMessageDeliveredFromOriginEventObject
>;

export type InboxMessageDeliveredFromOriginEventFilter =
  TypedEventFilter<InboxMessageDeliveredFromOriginEvent>;

export interface IInboxBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInboxBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowListEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    calculateRetryableSubmissionFee(
      dataLength: PromiseOrValue<BigNumberish>,
      baseFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _bridge: PromiseOrValue<string>,
      _sequencerInbox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAllowed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxDataSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendContractTransaction(
      gasLimit: PromiseOrValue<BigNumberish>,
      maxFeePerGas: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendL2Message(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendL2MessageFromOrigin(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendUnsignedTransaction(
      gasLimit: PromiseOrValue<BigNumberish>,
      maxFeePerGas: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sequencerInbox(overrides?: CallOverrides): Promise<[string]>;

    setAllowList(
      user: PromiseOrValue<string>[],
      val: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowListEnabled(
      _allowListEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowListEnabled(overrides?: CallOverrides): Promise<boolean>;

  bridge(overrides?: CallOverrides): Promise<string>;

  calculateRetryableSubmissionFee(
    dataLength: PromiseOrValue<BigNumberish>,
    baseFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProxyAdmin(overrides?: CallOverrides): Promise<string>;

  initialize(
    _bridge: PromiseOrValue<string>,
    _sequencerInbox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAllowed(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxDataSize(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendContractTransaction(
    gasLimit: PromiseOrValue<BigNumberish>,
    maxFeePerGas: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendL2Message(
    messageData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendL2MessageFromOrigin(
    messageData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendUnsignedTransaction(
    gasLimit: PromiseOrValue<BigNumberish>,
    maxFeePerGas: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sequencerInbox(overrides?: CallOverrides): Promise<string>;

  setAllowList(
    user: PromiseOrValue<string>[],
    val: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowListEnabled(
    _allowListEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowListEnabled(overrides?: CallOverrides): Promise<boolean>;

    bridge(overrides?: CallOverrides): Promise<string>;

    calculateRetryableSubmissionFee(
      dataLength: PromiseOrValue<BigNumberish>,
      baseFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyAdmin(overrides?: CallOverrides): Promise<string>;

    initialize(
      _bridge: PromiseOrValue<string>,
      _sequencerInbox: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxDataSize(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    sendContractTransaction(
      gasLimit: PromiseOrValue<BigNumberish>,
      maxFeePerGas: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendL2Message(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendL2MessageFromOrigin(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendUnsignedTransaction(
      gasLimit: PromiseOrValue<BigNumberish>,
      maxFeePerGas: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sequencerInbox(overrides?: CallOverrides): Promise<string>;

    setAllowList(
      user: PromiseOrValue<string>[],
      val: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowListEnabled(
      _allowListEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "InboxMessageDelivered(uint256,bytes)"(
      messageNum?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): InboxMessageDeliveredEventFilter;
    InboxMessageDelivered(
      messageNum?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): InboxMessageDeliveredEventFilter;

    "InboxMessageDeliveredFromOrigin(uint256)"(
      messageNum?: PromiseOrValue<BigNumberish> | null
    ): InboxMessageDeliveredFromOriginEventFilter;
    InboxMessageDeliveredFromOrigin(
      messageNum?: PromiseOrValue<BigNumberish> | null
    ): InboxMessageDeliveredFromOriginEventFilter;
  };

  estimateGas: {
    allowListEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRetryableSubmissionFee(
      dataLength: PromiseOrValue<BigNumberish>,
      baseFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bridge: PromiseOrValue<string>,
      _sequencerInbox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAllowed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDataSize(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendContractTransaction(
      gasLimit: PromiseOrValue<BigNumberish>,
      maxFeePerGas: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendL2Message(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendL2MessageFromOrigin(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendUnsignedTransaction(
      gasLimit: PromiseOrValue<BigNumberish>,
      maxFeePerGas: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sequencerInbox(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowList(
      user: PromiseOrValue<string>[],
      val: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowListEnabled(
      _allowListEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowListEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRetryableSubmissionFee(
      dataLength: PromiseOrValue<BigNumberish>,
      baseFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _bridge: PromiseOrValue<string>,
      _sequencerInbox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAllowed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDataSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendContractTransaction(
      gasLimit: PromiseOrValue<BigNumberish>,
      maxFeePerGas: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendL2Message(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendL2MessageFromOrigin(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendUnsignedTransaction(
      gasLimit: PromiseOrValue<BigNumberish>,
      maxFeePerGas: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sequencerInbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowList(
      user: PromiseOrValue<string>[],
      val: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowListEnabled(
      _allowListEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
