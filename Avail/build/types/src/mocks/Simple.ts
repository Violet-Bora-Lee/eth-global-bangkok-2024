/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SimpleInterface extends utils.Interface {
  functions: {
    "checkBlockHashes()": FunctionFragment;
    "checkCalls(bool,bool,bool,bool,bool,bool)": FunctionFragment;
    "checkGasUsed(address,bytes)": FunctionFragment;
    "checkIsTopLevelOrWasAliased(bool,bool)": FunctionFragment;
    "counter()": FunctionFragment;
    "difficulty()": FunctionFragment;
    "emitNullEvent()": FunctionFragment;
    "getBlockDifficulty()": FunctionFragment;
    "increment()": FunctionFragment;
    "incrementEmit()": FunctionFragment;
    "incrementRedeem()": FunctionFragment;
    "logAndIncrement(uint256)": FunctionFragment;
    "noop()": FunctionFragment;
    "pleaseRevert()": FunctionFragment;
    "postManyBatches(address,bytes,uint256)": FunctionFragment;
    "storeDifficulty()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkBlockHashes"
      | "checkCalls"
      | "checkGasUsed"
      | "checkIsTopLevelOrWasAliased"
      | "counter"
      | "difficulty"
      | "emitNullEvent"
      | "getBlockDifficulty"
      | "increment"
      | "incrementEmit"
      | "incrementRedeem"
      | "logAndIncrement"
      | "noop"
      | "pleaseRevert"
      | "postManyBatches"
      | "storeDifficulty"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkBlockHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkCalls",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkGasUsed",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsTopLevelOrWasAliased",
    values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitNullEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "increment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incrementEmit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementRedeem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "logAndIncrement",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "noop", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pleaseRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postManyBatches",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDifficulty",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkBlockHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkCalls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkGasUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIsTopLevelOrWasAliased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitNullEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementEmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logAndIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "noop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pleaseRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postManyBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDifficulty",
    data: BytesLike
  ): Result;

  events: {
    "CounterEvent(uint64)": EventFragment;
    "LogAndIncrementCalled(uint256,uint256)": EventFragment;
    "NullEvent()": EventFragment;
    "RedeemedEvent(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CounterEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAndIncrementCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NullEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemedEvent"): EventFragment;
}

export interface CounterEventEventObject {
  count: BigNumber;
}
export type CounterEventEvent = TypedEvent<
  [BigNumber],
  CounterEventEventObject
>;

export type CounterEventEventFilter = TypedEventFilter<CounterEventEvent>;

export interface LogAndIncrementCalledEventObject {
  expected: BigNumber;
  have: BigNumber;
}
export type LogAndIncrementCalledEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogAndIncrementCalledEventObject
>;

export type LogAndIncrementCalledEventFilter =
  TypedEventFilter<LogAndIncrementCalledEvent>;

export interface NullEventEventObject {}
export type NullEventEvent = TypedEvent<[], NullEventEventObject>;

export type NullEventEventFilter = TypedEventFilter<NullEventEvent>;

export interface RedeemedEventEventObject {
  caller: string;
  redeemer: string;
}
export type RedeemedEventEvent = TypedEvent<
  [string, string],
  RedeemedEventEventObject
>;

export type RedeemedEventEventFilter = TypedEventFilter<RedeemedEventEvent>;

export interface Simple extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkBlockHashes(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkCalls(
      useTopLevel: PromiseOrValue<boolean>,
      directCase: PromiseOrValue<boolean>,
      staticCase: PromiseOrValue<boolean>,
      delegateCase: PromiseOrValue<boolean>,
      callcodeCase: PromiseOrValue<boolean>,
      callCase: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkGasUsed(
      to: PromiseOrValue<string>,
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkIsTopLevelOrWasAliased(
      useTopLevel: PromiseOrValue<boolean>,
      expected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    counter(overrides?: CallOverrides): Promise<[BigNumber]>;

    difficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

    emitNullEvent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBlockDifficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

    increment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrementEmit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrementRedeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    logAndIncrement(
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    noop(overrides?: CallOverrides): Promise<[void]>;

    pleaseRevert(overrides?: CallOverrides): Promise<[void]>;

    postManyBatches(
      sequencerInbox: PromiseOrValue<string>,
      batchData: PromiseOrValue<BytesLike>,
      numberToPost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDifficulty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkBlockHashes(overrides?: CallOverrides): Promise<BigNumber>;

  checkCalls(
    useTopLevel: PromiseOrValue<boolean>,
    directCase: PromiseOrValue<boolean>,
    staticCase: PromiseOrValue<boolean>,
    delegateCase: PromiseOrValue<boolean>,
    callcodeCase: PromiseOrValue<boolean>,
    callCase: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkGasUsed(
    to: PromiseOrValue<string>,
    input: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkIsTopLevelOrWasAliased(
    useTopLevel: PromiseOrValue<boolean>,
    expected: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  counter(overrides?: CallOverrides): Promise<BigNumber>;

  difficulty(overrides?: CallOverrides): Promise<BigNumber>;

  emitNullEvent(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

  increment(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrementEmit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrementRedeem(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  logAndIncrement(
    expected: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  noop(overrides?: CallOverrides): Promise<void>;

  pleaseRevert(overrides?: CallOverrides): Promise<void>;

  postManyBatches(
    sequencerInbox: PromiseOrValue<string>,
    batchData: PromiseOrValue<BytesLike>,
    numberToPost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDifficulty(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkBlockHashes(overrides?: CallOverrides): Promise<BigNumber>;

    checkCalls(
      useTopLevel: PromiseOrValue<boolean>,
      directCase: PromiseOrValue<boolean>,
      staticCase: PromiseOrValue<boolean>,
      delegateCase: PromiseOrValue<boolean>,
      callcodeCase: PromiseOrValue<boolean>,
      callCase: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkGasUsed(
      to: PromiseOrValue<string>,
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIsTopLevelOrWasAliased(
      useTopLevel: PromiseOrValue<boolean>,
      expected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    emitNullEvent(overrides?: CallOverrides): Promise<void>;

    getBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    increment(overrides?: CallOverrides): Promise<void>;

    incrementEmit(overrides?: CallOverrides): Promise<void>;

    incrementRedeem(overrides?: CallOverrides): Promise<void>;

    logAndIncrement(
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    noop(overrides?: CallOverrides): Promise<void>;

    pleaseRevert(overrides?: CallOverrides): Promise<void>;

    postManyBatches(
      sequencerInbox: PromiseOrValue<string>,
      batchData: PromiseOrValue<BytesLike>,
      numberToPost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDifficulty(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CounterEvent(uint64)"(count?: null): CounterEventEventFilter;
    CounterEvent(count?: null): CounterEventEventFilter;

    "LogAndIncrementCalled(uint256,uint256)"(
      expected?: null,
      have?: null
    ): LogAndIncrementCalledEventFilter;
    LogAndIncrementCalled(
      expected?: null,
      have?: null
    ): LogAndIncrementCalledEventFilter;

    "NullEvent()"(): NullEventEventFilter;
    NullEvent(): NullEventEventFilter;

    "RedeemedEvent(address,address)"(
      caller?: null,
      redeemer?: null
    ): RedeemedEventEventFilter;
    RedeemedEvent(caller?: null, redeemer?: null): RedeemedEventEventFilter;
  };

  estimateGas: {
    checkBlockHashes(overrides?: CallOverrides): Promise<BigNumber>;

    checkCalls(
      useTopLevel: PromiseOrValue<boolean>,
      directCase: PromiseOrValue<boolean>,
      staticCase: PromiseOrValue<boolean>,
      delegateCase: PromiseOrValue<boolean>,
      callcodeCase: PromiseOrValue<boolean>,
      callCase: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkGasUsed(
      to: PromiseOrValue<string>,
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIsTopLevelOrWasAliased(
      useTopLevel: PromiseOrValue<boolean>,
      expected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    emitNullEvent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    increment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrementEmit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrementRedeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    logAndIncrement(
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    noop(overrides?: CallOverrides): Promise<BigNumber>;

    pleaseRevert(overrides?: CallOverrides): Promise<BigNumber>;

    postManyBatches(
      sequencerInbox: PromiseOrValue<string>,
      batchData: PromiseOrValue<BytesLike>,
      numberToPost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDifficulty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkBlockHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkCalls(
      useTopLevel: PromiseOrValue<boolean>,
      directCase: PromiseOrValue<boolean>,
      staticCase: PromiseOrValue<boolean>,
      delegateCase: PromiseOrValue<boolean>,
      callcodeCase: PromiseOrValue<boolean>,
      callCase: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkGasUsed(
      to: PromiseOrValue<string>,
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIsTopLevelOrWasAliased(
      useTopLevel: PromiseOrValue<boolean>,
      expected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    difficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitNullEvent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBlockDifficulty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrementEmit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrementRedeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    logAndIncrement(
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    noop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pleaseRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postManyBatches(
      sequencerInbox: PromiseOrValue<string>,
      batchData: PromiseOrValue<BytesLike>,
      numberToPost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDifficulty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
