/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ArbRetryableTxInterface extends utils.Interface {
  functions: {
    "cancel(bytes32)": FunctionFragment;
    "getBeneficiary(bytes32)": FunctionFragment;
    "getCurrentRedeemer()": FunctionFragment;
    "getLifetime()": FunctionFragment;
    "getTimeout(bytes32)": FunctionFragment;
    "keepalive(bytes32)": FunctionFragment;
    "redeem(bytes32)": FunctionFragment;
    "submitRetryable(bytes32,uint256,uint256,uint256,uint256,uint64,uint256,address,address,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancel"
      | "getBeneficiary"
      | "getCurrentRedeemer"
      | "getLifetime"
      | "getTimeout"
      | "keepalive"
      | "redeem"
      | "submitRetryable"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiary",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRedeemer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLifetime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeout",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "keepalive",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitRetryable",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRedeemer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTimeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keepalive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitRetryable",
    data: BytesLike
  ): Result;

  events: {
    "Canceled(bytes32)": EventFragment;
    "LifetimeExtended(bytes32,uint256)": EventFragment;
    "RedeemScheduled(bytes32,bytes32,uint64,uint64,address,uint256,uint256)": EventFragment;
    "Redeemed(bytes32)": EventFragment;
    "TicketCreated(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Canceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LifetimeExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketCreated"): EventFragment;
}

export interface CanceledEventObject {
  ticketId: string;
}
export type CanceledEvent = TypedEvent<[string], CanceledEventObject>;

export type CanceledEventFilter = TypedEventFilter<CanceledEvent>;

export interface LifetimeExtendedEventObject {
  ticketId: string;
  newTimeout: BigNumber;
}
export type LifetimeExtendedEvent = TypedEvent<
  [string, BigNumber],
  LifetimeExtendedEventObject
>;

export type LifetimeExtendedEventFilter =
  TypedEventFilter<LifetimeExtendedEvent>;

export interface RedeemScheduledEventObject {
  ticketId: string;
  retryTxHash: string;
  sequenceNum: BigNumber;
  donatedGas: BigNumber;
  gasDonor: string;
  maxRefund: BigNumber;
  submissionFeeRefund: BigNumber;
}
export type RedeemScheduledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber, BigNumber],
  RedeemScheduledEventObject
>;

export type RedeemScheduledEventFilter = TypedEventFilter<RedeemScheduledEvent>;

export interface RedeemedEventObject {
  userTxHash: string;
}
export type RedeemedEvent = TypedEvent<[string], RedeemedEventObject>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface TicketCreatedEventObject {
  ticketId: string;
}
export type TicketCreatedEvent = TypedEvent<[string], TicketCreatedEventObject>;

export type TicketCreatedEventFilter = TypedEventFilter<TicketCreatedEvent>;

export interface ArbRetryableTx extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbRetryableTxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancel(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBeneficiary(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentRedeemer(overrides?: CallOverrides): Promise<[string]>;

    getLifetime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimeout(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    keepalive(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitRetryable(
      requestId: PromiseOrValue<BytesLike>,
      l1BaseFee: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<BigNumberish>,
      callvalue: PromiseOrValue<BigNumberish>,
      gasFeeCap: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      maxSubmissionFee: PromiseOrValue<BigNumberish>,
      feeRefundAddress: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      retryTo: PromiseOrValue<string>,
      retryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancel(
    ticketId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBeneficiary(
    ticketId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentRedeemer(overrides?: CallOverrides): Promise<string>;

  getLifetime(overrides?: CallOverrides): Promise<BigNumber>;

  getTimeout(
    ticketId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  keepalive(
    ticketId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem(
    ticketId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitRetryable(
    requestId: PromiseOrValue<BytesLike>,
    l1BaseFee: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<BigNumberish>,
    callvalue: PromiseOrValue<BigNumberish>,
    gasFeeCap: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    maxSubmissionFee: PromiseOrValue<BigNumberish>,
    feeRefundAddress: PromiseOrValue<string>,
    beneficiary: PromiseOrValue<string>,
    retryTo: PromiseOrValue<string>,
    retryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancel(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBeneficiary(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentRedeemer(overrides?: CallOverrides): Promise<string>;

    getLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeout(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keepalive(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    submitRetryable(
      requestId: PromiseOrValue<BytesLike>,
      l1BaseFee: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<BigNumberish>,
      callvalue: PromiseOrValue<BigNumberish>,
      gasFeeCap: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      maxSubmissionFee: PromiseOrValue<BigNumberish>,
      feeRefundAddress: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      retryTo: PromiseOrValue<string>,
      retryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Canceled(bytes32)"(
      ticketId?: PromiseOrValue<BytesLike> | null
    ): CanceledEventFilter;
    Canceled(ticketId?: PromiseOrValue<BytesLike> | null): CanceledEventFilter;

    "LifetimeExtended(bytes32,uint256)"(
      ticketId?: PromiseOrValue<BytesLike> | null,
      newTimeout?: null
    ): LifetimeExtendedEventFilter;
    LifetimeExtended(
      ticketId?: PromiseOrValue<BytesLike> | null,
      newTimeout?: null
    ): LifetimeExtendedEventFilter;

    "RedeemScheduled(bytes32,bytes32,uint64,uint64,address,uint256,uint256)"(
      ticketId?: PromiseOrValue<BytesLike> | null,
      retryTxHash?: PromiseOrValue<BytesLike> | null,
      sequenceNum?: PromiseOrValue<BigNumberish> | null,
      donatedGas?: null,
      gasDonor?: null,
      maxRefund?: null,
      submissionFeeRefund?: null
    ): RedeemScheduledEventFilter;
    RedeemScheduled(
      ticketId?: PromiseOrValue<BytesLike> | null,
      retryTxHash?: PromiseOrValue<BytesLike> | null,
      sequenceNum?: PromiseOrValue<BigNumberish> | null,
      donatedGas?: null,
      gasDonor?: null,
      maxRefund?: null,
      submissionFeeRefund?: null
    ): RedeemScheduledEventFilter;

    "Redeemed(bytes32)"(
      userTxHash?: PromiseOrValue<BytesLike> | null
    ): RedeemedEventFilter;
    Redeemed(
      userTxHash?: PromiseOrValue<BytesLike> | null
    ): RedeemedEventFilter;

    "TicketCreated(bytes32)"(
      ticketId?: PromiseOrValue<BytesLike> | null
    ): TicketCreatedEventFilter;
    TicketCreated(
      ticketId?: PromiseOrValue<BytesLike> | null
    ): TicketCreatedEventFilter;
  };

  estimateGas: {
    cancel(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBeneficiary(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRedeemer(overrides?: CallOverrides): Promise<BigNumber>;

    getLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeout(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keepalive(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitRetryable(
      requestId: PromiseOrValue<BytesLike>,
      l1BaseFee: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<BigNumberish>,
      callvalue: PromiseOrValue<BigNumberish>,
      gasFeeCap: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      maxSubmissionFee: PromiseOrValue<BigNumberish>,
      feeRefundAddress: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      retryTo: PromiseOrValue<string>,
      retryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBeneficiary(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRedeemer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLifetime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimeout(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepalive(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      ticketId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitRetryable(
      requestId: PromiseOrValue<BytesLike>,
      l1BaseFee: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<BigNumberish>,
      callvalue: PromiseOrValue<BigNumberish>,
      gasFeeCap: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      maxSubmissionFee: PromiseOrValue<BigNumberish>,
      feeRefundAddress: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      retryTo: PromiseOrValue<string>,
      retryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
