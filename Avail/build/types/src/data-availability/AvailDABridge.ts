/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AvailDABridgeInterface extends utils.Interface {
  functions: {
    "AVAIL_MESSAGE_HEADER_FLAG()": FunctionFragment;
    "DA_MESSAGE_HEADER_FLAG()": FunctionFragment;
    "verifyBatchAttestation(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AVAIL_MESSAGE_HEADER_FLAG"
      | "DA_MESSAGE_HEADER_FLAG"
      | "verifyBatchAttestation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AVAIL_MESSAGE_HEADER_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DA_MESSAGE_HEADER_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBatchAttestation",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AVAIL_MESSAGE_HEADER_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DA_MESSAGE_HEADER_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBatchAttestation",
    data: BytesLike
  ): Result;

  events: {
    "ValidatedBatchAttestationOverDA(bytes32)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ValidatedBatchAttestationOverDA"
  ): EventFragment;
}

export interface ValidatedBatchAttestationOverDAEventObject {
  blobHash: string;
}
export type ValidatedBatchAttestationOverDAEvent = TypedEvent<
  [string],
  ValidatedBatchAttestationOverDAEventObject
>;

export type ValidatedBatchAttestationOverDAEventFilter =
  TypedEventFilter<ValidatedBatchAttestationOverDAEvent>;

export interface AvailDABridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvailDABridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AVAIL_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<[string]>;

    DA_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<[string]>;

    verifyBatchAttestation(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  AVAIL_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

  DA_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

  verifyBatchAttestation(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    AVAIL_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

    DA_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<string>;

    verifyBatchAttestation(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ValidatedBatchAttestationOverDA(bytes32)"(
      blobHash?: PromiseOrValue<BytesLike> | null
    ): ValidatedBatchAttestationOverDAEventFilter;
    ValidatedBatchAttestationOverDA(
      blobHash?: PromiseOrValue<BytesLike> | null
    ): ValidatedBatchAttestationOverDAEventFilter;
  };

  estimateGas: {
    AVAIL_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    DA_MESSAGE_HEADER_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    verifyBatchAttestation(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AVAIL_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DA_MESSAGE_HEADER_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyBatchAttestation(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
