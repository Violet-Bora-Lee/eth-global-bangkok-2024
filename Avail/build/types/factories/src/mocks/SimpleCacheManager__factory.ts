/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SimpleCacheManager,
  SimpleCacheManagerInterface,
} from "../../../src/mocks/SimpleCacheManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "program",
        type: "address",
      },
    ],
    name: "cacheProgram",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "program",
        type: "address",
      },
    ],
    name: "evictProgram",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061014c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636c769c091461003b578063e73ac9f214610050575b600080fd5b61004e6100493660046100e6565b610063565b005b61004e61005e3660046100e6565b6100b9565b60405163ce97201360e01b8152813f600482015260729063ce972013906024015b600060405180830381600087803b15801561009e57600080fd5b505af11580156100b2573d6000803e3d6000fd5b5050505050565b60405163739d64f960e11b81526001600160a01b038216600482015260729063e73ac9f290602401610084565b6000602082840312156100f857600080fd5b81356001600160a01b038116811461010f57600080fd5b939250505056fea2646970667358221220b51a6d8788db1f3edf1c8949fd91357370957c416d76b32c58e4a96df4ec36e564736f6c63430008090033";

type SimpleCacheManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleCacheManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleCacheManager__factory extends ContractFactory {
  constructor(...args: SimpleCacheManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleCacheManager> {
    return super.deploy(overrides || {}) as Promise<SimpleCacheManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleCacheManager {
    return super.attach(address) as SimpleCacheManager;
  }
  override connect(signer: Signer): SimpleCacheManager__factory {
    return super.connect(signer) as SimpleCacheManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleCacheManagerInterface {
    return new utils.Interface(_abi) as SimpleCacheManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleCacheManager {
    return new Contract(address, _abi, signerOrProvider) as SimpleCacheManager;
  }
}
